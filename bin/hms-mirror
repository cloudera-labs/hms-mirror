#!/usr/bin/env sh
#
# Copyright (c) 2022. Cloudera, Inc. All Rights Reserved
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#

# Resolve Symlinks of exe
if [[ "$OSTYPE" == "darwin"* ]]; then
  # Mac OSX
  RESOLVED_EXE_PATH=`readlink $0`
else
  # ...
  RESOLVED_EXE_PATH=`readlink -f $0`
fi

# Find Dir of resolved script
APP_DIR=$(dirname $RESOLVED_EXE_PATH)
CURR_DIR=$(pwd)

echo "APP_DIR: $APP_DIR"

DO_NOT_FILE="${APP_DIR}/DO_NOT_RUN_APP_FROM_HERE.txt"
if [ -f $DO_NOT_FILE ]; then
  echo "Do NOT run application from 'install' directory.  If properly installed, the application will be in your PATH";
  exit 1
fi

if [[ "${APP_DIR}" == "${HOME}/.hms-mirror/bin" ]]; then
  echo "Running from User Local Instance"
else
  echo "Running Host instance"
fi

if [[ ! -d ${HOME}/.hms-mirror/aux_libs ]]; then
  mkdir -p ${HOME}/.hms-mirror/aux_libs
fi

if [ ! -z ${JAVA_HOME} ]; then
  JAVA="${JAVA_HOME}/bin/java"
else
  JAVA=java
fi

PRG_ARGS=
CMD_CP=

AUX_LIBS_DIR=${HMS_MIRROR_AUX_LIBS:-${HOME}/.hms-mirror/aux_libs}

SHOW_CP=
CMD_DIRECTIVE=
CMD_ARGS=
VERBOSE=

# The new default is to run using the `hadoop classpath`, which assumes that the host has Hadoop installed and
#  we'll use the classpath from the host to include the current hadoop libraries.
HADOOP_CLASSPATH=false

APP_JAVA_OPTS=${JAVA_OPTS:-"-Xms4096m -Xmx8192m -XX:+UseG1GC"}
LOGGING_THRESHOLD=${LOGGING_THRESHOLD:-"INFO"}
LOGGING_FILE_PREFIX=${LOGGING_FILE_PREFIX:-"hms-mirror"}
LOGGING_SERVICE_FILE_PREFIX=${LOGGING_SERVICE_FILE_PREFIX:-"hms-mirror-service"}

SERVICE_MODE=false
APP_MAIN_CLASS="com.cloudera.utils.hms.mirror.cli.Mirror"

APP_OUTPUT_DIR=${HOME}/.hms-mirror/reports
APP_PID_FILE=${HOME}/.hms-mirror/hms-mirror.pid

ACTION=START

DIR_OVERRIDE=

while [[ $# -gt 0 ]]; do
  case "$1" in
  -D*)
    APP_JAVA_OPTS="${APP_JAVA_OPTS} ${1}"
    shift
    ;;
  -CP)
    shift
    CMD_CP=${CMD_CP}:$1
    shift
    ;;
  --stop)
    ACTION=STOP
    shift
    ;;
  --hadoop-classpath)
    shift
    # Not supported in this version, yet.
#    HADOOP_CLASSPATH="true"
    ;;
  --aux-libs)
    shift
    export AUX_LIBS_DIR=$1
    shift
    ;;
  --show-cp)
    shift
    SHOW_CP="true"
    ;;
  --service)
    shift
    SERVICE_MODE="true"
    APP_JAVA_OPTS="${APP_JAVA_OPTS} -Djava.net.preferIPv4Stack=true"
    APP_MAIN_CLASS="com.cloudera.utils.hms.mirror.web.Mirror"
    ;;
  -o|--output-dir)
    shift
#    PRG_ARGS="${PRG_ARGS} -o $1"
    APP_OUTPUT_DIR=$1
    DIR_OVERRIDE="x"
    shift
    ;;
  -dp|--decrypt-password)
    shift
    APP_MAIN_CLASS="com.cloudera.utils.hms.mirror.password.Password"
    PRG_ARGS="${PRG_ARGS} -dp $1"
    shift
    ;;
  -p|--password)
    shift
    APP_MAIN_CLASS="com.cloudera.utils.hms.mirror.password.Password"
    PRG_ARGS="${PRG_ARGS} -p $1"
    shift
    ;;
  *)
    PRG_ARGS="${PRG_ARGS} $1"
    shift
    ;;
  esac
done

# Set the user home directory for java to ensure that we have consistent behavior.
# This could occur when a user doesn't have the traditional home directory available.
# If the users home directory isn't standard, like /home/username, then the user will need to set the HOME variable.
APP_JAVA_OPTS="${APP_JAVA_OPTS} -Duser.home=${HOME}"

## If the ACTION is STOP, then we need to kill the process and exit.
if [[ "${ACTION}" == "STOP" ]]; then
  if [ -f ${APP_PID_FILE} ]; then
    PID=$(cat ${APP_PID_FILE})
    if ps -p ${PID} > /dev/null; then
      echo "Stopping Process with PID: ${PID}"
      kill ${PID}
      rm -f ${APP_PID_FILE}
      exit 0
    else
      echo "Process is not running with PID: ${PID}"
      exit 1
    fi
  else
    echo "No PID file found.  Process may not be running."
    exit 1
  fi
fi

APP_OUTPUT_PATH=${APP_OUTPUT_DIR}

if [[ "${DIR_OVERRIDE}x" == "xx" ]]; then
  #  Set the application output directory.
  PRG_ARGS="${PRG_ARGS} -o ${APP_OUTPUT_PATH}"
fi

export APP_OUTPUT_PATH

if [[ "${SERVICE_MODE}x" == "truex" ]]; then
  # Removing the logging dir setting for service mode.
  APP_JAVA_OPTS="${APP_JAVA_OPTS} -Dlogging.threshold=${LOGGING_THRESHOLD} -Dlogging.filename-prefix=${LOGGING_SERVICE_FILE_PREFIX}"
else
  # Only if the output path is overridden, then we need to set the logging.dir to the output path.
  if [[ "${DIR_OVERRIDE}x" == "xx" ]]; then
    APP_JAVA_OPTS="${APP_JAVA_OPTS} -Dlogging.dir='${APP_OUTPUT_PATH}' -Dlogging.threshold=${LOGGING_THRESHOLD} -Dlogging.filename-prefix=${LOGGING_FILE_PREFIX}"
  else
    APP_JAVA_OPTS="${APP_JAVA_OPTS} -Dlogging.threshold=${LOGGING_THRESHOLD} -Dlogging.filename-prefix=${LOGGING_FILE_PREFIX}"
  fi
fi

if [[ ! -d ${AUX_LIBS_DIR} ]]; then
  mkdir -p ${AUX_LIBS_DIR}
fi

# Add jars in aux_libs to "Spring" Load Path
#for i in ${AUX_LIBS_DIR}/*.jar; do
#  if [[ -f $i ]]; then
#    CMD_CP="file:${i},${CMP_CP}"
#  fi
#done

# Loads the JDBC Drivers for the Metastore Direct Connections
CMD_CP="${AUX_LIBS_DIR}"

if [[ "${HADOOP_CLASSPATH}x" == "truex" ]]; then
  echo "Picking up local Hadoop Classpath Libs."
#  HADOOP_CLASSPATH_LIBS=$(hadoop classpath)
  # Remove '*' from hadoop classpath
  # TODO: User needs to have Hadoop installed on the host and in the following path.
  HADOOP_CLASSPATH_LIBS=${HOME}/.hms-mirror/aux_libs/hadoop-classpath

  CMP_CP="${CMD_CP},${HADOOP_CLASSPATH_LIBS}"
#  for i in ${HADOOP_CLASSPATH_LIBS}/*.jar; do
#    if [[ -f $i ]]; then
#      CMD_CP="file:${i},${CMP_CP}"
#    fi
#  done

fi

# Replace colon with comma in $CMD_CP
#CMD_CP=$(echo $CMD_CP | sed 's/:/,/g')

CLI_CMD=""

if [[ "${SHOW_CP}x" != "x" ]]; then
  echo "Spring Classpath(loader.path): ${CMD_CP}"
fi

if [[ "${APP_JAVA_OPTS}x" != "x" ]]; then
  echo "Application JAVA_OPTS=${APP_JAVA_OPTS}" 1>&2
fi

if [[ "${PRG_ARGS}x" != "x" ]]; then
  echo "PRG_ARGS=${PRG_ARGS}" 1>&2
fi

echo "Using Java Version: "
$(${JAVA} -version)
echo ""

# Used to get external libs into SpringBoot Classpath
export LOADER_PATH=${CMD_CP}
export LOADER_MAIN=${APP_MAIN_CLASS}
export LOADER_ARGS=${PRG_ARGS}

if [[ "${HADOOP_CLASSPATH}x" == "truex" ]]; then
  CLI_CMD="${JAVA} ${APP_JAVA_OPTS} -jar ${APP_DIR}/../lib/*-thin.jar"
else
  CLI_CMD="${JAVA} ${APP_JAVA_OPTS} -jar ${APP_DIR}/../lib/*-standalone.jar"
fi

echo "CLI_CMD: ${CLI_CMD}"

if [[ "${SERVICE_MODE}x" == "truex" ]]; then
  # Run CLI_CMD in the background
  # Check the PID file to see if process is running.
  if [ -f ${APP_PID_FILE} ]; then
    PID=$(cat ${APP_PID_FILE})
    if ps -p ${PID} > /dev/null; then
      echo ""
      echo "=====  WARNING: STARTUP ABORTED  ====="
      echo "Process is already running with PID: ${PID}"
      echo "Please stop the process (hms-mirror --stop) before starting a new instance."
      echo "======================================"
      exit 1
    fi
  fi
  echo "Running in Service Mode from: `pwd`"
  nohup `${CLI_CMD}` > hms-mirror-nohup.out 2>&1 &

else
  eval "${CLI_CMD}"
fi

